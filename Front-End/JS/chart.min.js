var __decorate =
    (this && this.__decorate) ||
    function (decorators, target, key, desc) {
        var length = arguments.length;
        var targetKey = length < 3 ? key : desc === null ? (desc = Object.getOwnPropertyDescriptor(target, key)) : desc;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") {
            targetKey = Reflect.decorate(decorators, target, key, desc);
        } else {
            for (var i = decorators.length - 1; i >= 0; i--) {
                var decorator = decorators[i];
                if (decorator) {
                    targetKey = (length < 3 ? decorator(targetKey) : length > 3 ? decorator(target, key, targetKey) : decorator(target, key)) || targetKey;
                }
            }
        }
        if (length > 3 && targetKey) {
            Object.defineProperty(target, key, targetKey);
        }
        return targetKey;
    };

import { NgModule, Component, ElementRef, AfterViewInit, OnDestroy, Input, Output, EventEmitter, ChangeDetectionStrategy } from "@angular/core";
import { CommonModule } from "@angular/common";
import * as Chart from "chart.js";

let UIChart = class {
    constructor(el) {
        this.el = el;
        this.options = {};
        this.plugins = [];
        this.responsive = true;
        this.onDataSelect = new EventEmitter();
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
        this.reinit();
    }
    ngAfterViewInit() {
        this.initChart();
        this.initialized = true;
    }
    onCanvasClick(event) {
        if (this.chart) {
            let element = this.chart.getElementAtEvent(event);
            let dataset = this.chart.getDatasetAtEvent(event);
            if (element && element[0] && dataset) {
                this.onDataSelect.emit({ originalEvent: event, element: element[0], dataset: dataset });
            }
        }
    }
    initChart() {
        let options = this.options || {};
        options.responsive = this.responsive;
        if (this.responsive && (this.height || this.width)) {
            options.maintainAspectRatio = false;
        }
        this.chart = new Chart(this.el.nativeElement.children[0].children[0], {
            type: this.type,
            data: this.data,
            options: this.options,
            plugins: this.plugins,
        });
    }
    getCanvas() {
        return this.el.nativeElement.children[0].children[0];
    }
    getBase64Image() {
        return this.chart.toBase64Image();
    }
    generateLegend() {
        if (this.chart) {
            return this.chart.generateLegend();
        }
    }
    refresh() {
        if (this.chart) {
            this.chart.update();
        }
    }
    reinit() {
        if (this.chart) {
            this.chart.destroy();
            this.initChart();
        }
    }
    ngOnDestroy() {
        if (this.chart) {
            this.chart.destroy();
            this.initialized = false;
            this.chart = null;
        }
    }
};
UIChart.ctorParameters = () => [{ type: ElementRef }];
__decorate([Input()], UIChart.prototype, "type", void 0);
__decorate([Input()], UIChart.prototype, "options", void 0);
__decorate([Input()], UIChart.prototype, "plugins", void 0);
__decorate([Input()], UIChart.prototype, "width", void 0);
__decorate([Input()], UIChart.prototype, "height", void 0);
__decorate([Input()], UIChart.prototype, "responsive", void 0);
__decorate([Output()], UIChart.prototype, "onDataSelect", void 0);
__decorate([Input()], UIChart.prototype, "data", null);
export { UIChart };

let ChartModule = class {};
ChartModule = __decorate([
    NgModule({
        imports: [CommonModule],
        exports: [UIChart = __decorate([
            Component({
                selector: "p-chart",
                template: `
        <div style="position:relative" [style.width]="responsive && !width ? null : width" [style.height]="responsive && !height ? null : height">
            <canvas [attr.width]="responsive && !width ? null : width" [attr.height]="responsive && !height ? null : height" (click)="onCanvasClick($event)"></canvas>
        </div>
    `,
                changeDetection: ChangeDetectionStrategy.Default,
            })
        ], UIChart)],
        declarations: [UIChart],
    })
], ChartModule);
export { ChartModule };
